import axios from 'axios';
import fs from 'fs';

const config = {
  name: "fakechat",
  aliases: ["fc"],
  description: "Create screenshot of a fake chat!",
  usage: "[mention/reply]",
  cooldown: 3,
  permissions: [0, 1, 2],
  credits: "Isai Ivanov"
};

const supportedType = ["photo", "animated_image"];

async function findUid(link) {
  console.log(link)
  const headers = {
    "accept": "application/json, text/javascript, */*; q=0.01",
    "accept-language": "en-US,en;q=0.9",
    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
    "sec-ch-ua": "\"Not.A/Brand\";v=\"8\", \"Chromium\";v=\"114\", \"Google Chrome\";v=\"114\"",
    "sec-ch-ua-mobile": "?0",
    "sec-ch-ua-platform": "\"Windows\"",
    "sec-fetch-dest": "empty",
    "sec-fetch-mode": "cors",
    "sec-fetch-site": "same-origin",
    "x-requested-with": "XMLHttpRequest",
    "cookie": "cf_clearance=cKPchDexjMho8lRoEIT_GznuxNGCpujdYm..IH2Ez5Q-1688495333-0-250",
    "Referer": "https://id.traodoisub.com/",
    "Referrer-Policy": "same-origin"
  };

  const body = new URLSearchParams({ link }).toString();

  try {
    const response = await fetch("https://id.traodoisub.com/api.php", {
      method: "POST",
      headers,
      body
    });

    const data = await response.json();

    if (!data.id) {
      let error = new Error(data.error);
      error.name = "APIError";
      throw error;
    }

    return data.id;
  } catch (error) {
    console.error("Error:", error);
    throw error;
  }
}


function upload(url) {
  return new Promise(resolve => {
    axios
      .post("https://imgbb.sheikhferdous1.repl.co/upload", {
        imageURL: url
      })
      .then(response => {
        resolve(response.data.imgbbLink);
      })
      .catch(error => {
        console.error(error);
        resolve(null);
      });
  });
}

const themeData = [
  {
    "name": "Splash",
    "theme_id": "1444428146370518",
    "theme_color": "014EBD",
    "hex": "#dff4ff",
    "img_link": "https://i.postimg.cc/t4DMFmwG/Screenshot-2023-07-06-01-54-58-83.jpg"
  },
  {
    "name": "Father's Day",
    "theme_id": "782431426829078",
    "theme_color": "388B80",
    "hex": "#dffcea",
    "img_link": "https://i.postimg.cc/TY09s59r/Screenshot-2023-07-06-01-55-20-50.jpg"
  },
  {
    "name": "Spider-Man",
    "theme_id": "265555225961085",
    "theme_color": "BC0000",
    "hex": "#fef6eb",
    "img_link": "https://i.postimg.cc/gcZc4vGT/spiderman.jpg"
  },
  {
    "name": "Elemental",
    "theme_id": "268068835778766",
    "theme_color": "265DF5",
    "hex": "#ffffff",
    "img_link": "https://i.postimg.cc/63Ssn17p/elemental.jpg"
  },
  {
    "name": "The Little Mermaid",
    "theme_id": "1413815509454708",
    "theme_color": "2C62EF",
    "hex": "#d9f6fe",
    "img_link": "https://i.postimg.cc/Qxg8Zh9g/the-little-mermaid.jpg"
  },
  {
    "name": "APAHM",
    "theme_id": "121771470870245",
    "theme_color": "F65900",
    "hex": "#F65900",
    "img_link": "https://i.postimg.cc/yNxsRRfn/apahm.jpg"
  },
  {
    "name": "Parenthood",
    "theme_id": "810978360551741",
    "theme_color": "978E21",
    "hex": "#f3e1ec",
    "img_link": "https://i.postimg.cc/VNZsZgS3/parenthood.jpg"
  },
  {
    "name": "Guardians of the Galaxy",
    "theme_id": "101275642962533",
    "theme_color": "7D09B9",
    "hex": "#ffffff",
    "img_link": "https://i.postimg.cc/YCkSvhKy/gurains-of-the-galaxy.jpg"
  },
  {
    "name": "Bubble Tea",
    "theme_id": "195296273246380",
    "theme_color": "826044",
    "hex": "#fff4e1",
    "img_link": "https://i.postimg.cc/7h8kjWqQ/bubble-tea.jpg"
  },
  {
    "name": "Basketball",
    "theme_id": "6026716157422736",
    "theme_color": "B02501",
    "hex": "#ffdac5",
    "img_link": "https://i.postimg.cc/Px8H3jnw/basketball.jpg"
  },
  {
    "name": "Elephants & Flowers",
    "theme_id": "693996545771691",
    "theme_color": "574DC1",
    "hex": "#fff4d8",
    "img_link": "https://i.postimg.cc/kD3kh6vr/elephants-flowers.jpg"
  },
  {
    "name": "Cyberpunk 2077",
    "theme_id": "780962576430091",
    "theme_color": "000000",
    "hex": "#ffffff",
    "img_link": "https://i.postimg.cc/KvtzctVM/cyberpunk-2077.jpg"
  },
  {
    "name": "Music",
    "theme_id": "339021464972092",
    "theme_color": "0B0085",
    "hex": "#ffffff",
    "img_link": "https://i.postimg.cc/wBjTkZBX/music.jpg"
  },
  {
    "name": "Lo-Fi",
    "theme_id": "1060619084701625",
    "theme_color": "601DDD",
    "hex": "#ffffff",
    "img_link": "https://i.postimg.cc/qBPqd1mr/lo-fi.jpg"
  },
  {
    "name": "Sky",
    "theme_id": "3190514984517598",
    "theme_color": "4F4DFF",
    "hex": "e4f8ff",
    "img_link": "https://i.postimg.cc/gJwzCh8r/sky.jpg"
  },
  {
    "name": "Celebration",
    "theme_id": "627144732056021",
    "theme_color": "B24B77",
    "hex": "#fff5f4",
    "img_link": "https://i.postimg.cc/sxZkc9S9/celebration.jpg"
  },
  {
    "name": "Care",
    "theme_id": "275041734441112",
    "theme_color": "5797FC",
    "hex": "#e5fff9",
    "img_link": "https://i.postimg.cc/xdfS2mDn/care.jpg"
  },
  {
    "name": "Astrology",
    "theme_id": "3082966625307060",
    "theme_color": "FF595C",
    "hex": "#faedcb",
    "img_link": "https://i.postimg.cc/DzNFPzHh/astrology.jpg"
  },
  {
    "name": "Cottagecore",
    "theme_id": "539927563794799",
    "theme_color": "006528",
    "hex": "#f8fff7",
    "img_link": "https://i.postimg.cc/59YyGhSp/cottagecore.jpg"
  },
  {
    "name": "Ocean",
    "theme_id": "527564631955494",
    "theme_color": "0179F0",
    "hex": "#e4feff",
    "img_link": "https://i.postimg.cc/rmvVMpNj/ocean.jpg"
  },
  {
    "name": "Love",
    "theme_id": "741311439775765",
    "theme_color": "F9005A",
    "hex": "#fff5f4",
    "img_link": "https://i.postimg.cc/P545YTdf/love.jpg"
  },
  {
    "name": "Tie-Dye",
    "theme_id": "230032715012014",
    "theme_color": "0052CD",
    "hex": "#ffffff",
    "img_link": "https://i.postimg.cc/vZ3GDhvc/tie-dye.jpg"
  }
];

async function onCall({ message, args, data }) {
  let thread = await global.api.getThreadInfo(message.threadID);
  const matchingThemes = themeData.filter(theme => theme.theme_color === thread.color);
  let bg;
  let hex;
  let color;
  if (matchingThemes.length) {
    bg = `&backgroundImageLink=${encodeURIComponent(matchingThemes[0].img_link)}`;
    hex = `&textboxColor=${encodeURIComponent(matchingThemes[0].hex)}`;
    color = `&textColor=black`;
  } else {
    bg = null;
    hex = null;
    color = `&textColor=white`
  }
  try {
    let modifiedMsg = message.body;
    let prefix = data?.thread?.data?.prefix || global.config.PREFIX;
    const { type, messageReply, senderID, mentions } = message;
    let id = undefined;
    let image = '';
    // Check if modifiedMsg ends with | followed by numbers
    const regex = /\|\s*(\d+)$/; // Matches | followed by numbers
    const match = modifiedMsg.match(regex);

    const facebookRegex = /\|\s*(?:http(?:s)?:\/\/(?:www\.|m\.)?(?:facebook|fb)\.com\/(?:[\w-]+\/)?(?:(?:\w)*#!\/)?(?:pages\/)?(?:[?\w\-]*\/)?(?:profile\.php\?id=(?=\d.*))?[\w\.-]+)/;
    const facebookMatch = modifiedMsg.match(facebookRegex);

    const facebookLink = facebookMatch ? facebookMatch[0].replace("| ", "").trim() : null;


    if (type === 'message_reply' && Object.keys(mentions).length === 0) {
      if (modifiedMsg.endsWith("| me")) {
        id = message.senderID;
        modifiedMsg = await modifiedMsg.substring(0, modifiedMsg.lastIndexOf(" | me")).trim();
      } else if (match) {
        id = await match[1];
      } else if (facebookMatch) {
        const uid = facebookLink;
        id = await findUid(uid);
      } else {
        id = messageReply.senderID;
      }

      let { attachments } = messageReply;
      if (attachments.length) {
        let filteredAttachments = attachments.filter(attachment =>
          supportedType.includes(attachment.type)
        );
        if (filteredAttachments.length > 0) {
          image = `&imageLink=${await upload(filteredAttachments[0].url)}`;
        }
      }
    } else if (Object.keys(mentions).length > 0 && type !== 'message_reply') {
      id = Object.keys(mentions)[0];
    } else if (Object.keys(mentions).length > 0 && type === 'message_reply') {
      id = Object.keys(mentions)[0];
      let { attachments } = messageReply;
      if (attachments.length) {
        let filteredAttachments = attachments.filter(attachment =>
          supportedType.includes(attachment.type)
        );
        if (filteredAttachments.length > 0) {
          image = `&imageLink=${await upload(filteredAttachments[0].url)}`;
        }
      }
    } else if (modifiedMsg.endsWith("| me")) {
      id = message.senderID
      modifiedMsg = await modifiedMsg.substring(0, modifiedMsg.lastIndexOf(" | me")).trim();
    } else if (match) {
      id = await match[1];
    } else if (facebookMatch) {
      const uid = facebookLink;
      id = await findUid(uid);
    } else {
      id = senderID;
    }

    const profilePicUrl = await global.getAvatarURL(id);
    const response = await axios.head(profilePicUrl);
    const finalUrl = response.request.res.responseUrl;
    let Name = await global.controllers.Users.getName(id) || "Facebook user";

    if (!id) {
      return message.reply("Unable to determine user ID.");
    }

    const uploadResponse = await axios.post(
      'https://imgbb.sheikhferdous1.repl.co/upload',
      {
        imageURL: finalUrl,
      }
    );

    // ...

    if (uploadResponse == null) return message.reply("Failed to fetch avatar!")
    const prefixRegex = new RegExp(`^${prefix}${config.name}(\\s+|$)|^${prefix}${config.aliases.join('|')}(\\s+|$)`);
    if (prefix && prefixRegex.test(modifiedMsg)) {
      modifiedMsg = message.body.replace(prefixRegex, '').trim();
    }

    const nameIndex = modifiedMsg.lastIndexOf(Name);
    const pipeIndex = modifiedMsg.lastIndexOf('|', nameIndex);

    if (pipeIndex !== -1) {
      modifiedMsg = modifiedMsg.substring(0, pipeIndex).trim();
    }

    if (modifiedMsg.endsWith("| me")) {
      modifiedMsg = await modifiedMsg.substring(0, modifiedMsg.lastIndexOf(" | me")).trim();
    }

    if (match) {
      id = await match[1];
      modifiedMsg = await new Promise(resolve => {
        resolve(modifiedMsg.replace(match[0], '').trim()); // Remove the "| 1234567890" portion from modifiedMsg
      });
    }
    if (facebookMatch) {
      ;
      modifiedMsg = modifiedMsg.replace(facebookMatch[0], '').trim();
    }
    console.log(modifiedMsg);
    let imageStream = await global.getStream(`https://pen.fake-chat.repl.co/generateImage?message=${encodeURIComponent(modifiedMsg)}&avatar=${uploadResponse.data.imgbbLink}&name=${encodeURIComponent(Name)}${image}${bg}${hex}${color}`);
    const filePath = `./core/var/data/cache/${id}.png`;
    const fileStream = fs.createWriteStream(filePath);
    imageStream.pipe(fileStream);

    await new Promise((resolve) => {
      fileStream.on('finish', resolve);
    });

    const attachment = fs.createReadStream(filePath);
    await message.reply({ body: "", attachment });
    await message.react("✅")
  } catch (e) {
    console.log(e);
    await message.react("❌")
    return message.reply("An error occurred, please try again later!");
  }

  fs.unlinkSync(filePath);
}

export {
  onCall,
  config
};
    